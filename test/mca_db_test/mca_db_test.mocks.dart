// Mocks generated by Mockito 5.4.2 from annotations
// in mca_dashboard/test/mca_db_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mca_dashboard/manager/data/db.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MCADb].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCADb extends _i1.Mock implements _i2.MCADb {
  MockMCADb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<int> get encryption => (super.noSuchMethod(
        Invocation.getter(#encryption),
        returnValue: <int>[],
      ) as List<int>);
  @override
  set encryption(List<int>? _encryption) => super.noSuchMethod(
        Invocation.setter(
          #encryption,
          _encryption,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> initHive() => (super.noSuchMethod(
        Invocation.method(
          #initHive,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  String getClientId() => (super.noSuchMethod(
        Invocation.method(
          #getClientId,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  String getClientSecret() => (super.noSuchMethod(
        Invocation.method(
          #getClientSecret,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<void> setAccessToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setAccessToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  String getAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #getAccessToken,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<void> deleteAccessToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteAccessToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setRefreshToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setRefreshToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  String getRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #getRefreshToken,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<void> deleteRefreshToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteRefreshToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> setIsTestMode(bool? isTest) => (super.noSuchMethod(
        Invocation.method(
          #setIsTestMode,
          [isTest],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  bool getIsTestMode() => (super.noSuchMethod(
        Invocation.method(
          #getIsTestMode,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i3.Future<void> setGeoIpifyApiKey(String? apiKey) => (super.noSuchMethod(
        Invocation.method(
          #setGeoIpifyApiKey,
          [apiKey],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  String getApiBaseUrl() => (super.noSuchMethod(
        Invocation.method(
          #getApiBaseUrl,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  String getDomain() => (super.noSuchMethod(
        Invocation.method(
          #getDomain,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i3.Future<void> setDomain(String? domain) => (super.noSuchMethod(
        Invocation.method(
          #setDomain,
          [domain],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
