import '../../comps/custom_get_builder.dart';import '../../manager/models/approval_reqest_md.dart';import '../../manager/models/property_md.dart';import '../../theme/theme.dart';import '../properties/controllers/properties_controller.dart';import 'controllers/approval_request_controller.dart';class RequestBodyWithTab extends StatefulWidget {  final int? tabIndex;  RequestBodyWithTab({Key? key, this.tabIndex}) : super(key: key) {    tabIndex ?? 0;  }  @override  State<RequestBodyWithTab> createState() => _RequestBodyWithTabState();}class _RequestBodyWithTabState extends State<RequestBodyWithTab>    with SingleTickerProviderStateMixin {  late final TabController _tabController;  final List<Tab> tabs = const [    Tab(text: 'Pending'),    Tab(text: 'Complete'),  ];  @override  void initState() {    super.initState();    _tabController = TabController(length: tabs.length, vsync: this);    if (widget.tabIndex != null) {      _tabController.animateTo(widget.tabIndex!);    }    _tabController.addListener(() {      setState(() {});    });  }// TODO: Need ApprovalRequestController, remove PropertiesController// TODO: Add ApprovalRequestMd instead of PropertyMd (Now giving null error)  @override  Widget build(BuildContext context) {    return SizedBox(        height: 850,        child: Column(          crossAxisAlignment: CrossAxisAlignment.start,          children: [            SizedBox(              width: double.infinity,              child: TabBar(                overlayColor: MaterialStateProperty.all(Colors.transparent),                controller: _tabController,                splashFactory: NoSplash.splashFactory,                isScrollable: true,                indicatorWeight: 3.0,                indicatorColor: ThemeColors.MAIN_COLOR,                labelColor: ThemeColors.MAIN_COLOR,                unselectedLabelColor: ThemeColors.black,                labelStyle: ThemeText.tabTextStyle                    .copyWith(color: ThemeColors.MAIN_COLOR),                unselectedLabelStyle: ThemeText.tabTextStyle,                tabs: tabs,              ),            ),            const Divider(height: 0, color: ThemeColors.gray11),            _getTabChild(),          ],        ));  }  Widget _getTabChild() {    switch (_tabController.index) {      case 0:        return pending();      case 1:        return complete();      default:        return const SizedBox();    }  }  Widget pending() {    return tableBodyPending(context);  }  Widget tableBodyPending(BuildContext context) {    return GBuilder<PropertiesController>(      child: (c) => TableWrapperWidget(          enableShadow: false,          padding: const EdgeInsets.all(0),          child: SizedBox(            width: double.infinity,            child: SpacedColumn(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              crossAxisAlignment: CrossAxisAlignment.start,              children: [                _headerPending(context, c),                _bodyPending(context, c),                const Divider(                  color: ThemeColors.gray11,                  thickness: 1.0,                ),                if (c.isSmLoaded) _footerPending(c),              ],            ),          )),    );  }  Widget _bodyPending(BuildContext context, PropertiesController c) {    return UsersListTable(      onSmReady: c.setSm,      rows: c.departments          .map<PlutoRow>(            _buildItemPending,          )          .toList(),      cols: c.columns(context),    );  }  PlutoRow _buildItemPending(PropertiesMd e) {    return PlutoRow(cells: {      "name": PlutoCell(value: e.title ?? "-"),      "location": PlutoCell(value: e.locationName ?? "-"),      "client": PlutoCell(value: e.clientName ?? "-"),      "warehouse": PlutoCell(value: e.warehouseName ?? "-"),      "status": PlutoCell(value: (e.active ?? false) ? "active" : "inactive"),      "action": PlutoCell(value: e),    });  }  Widget _headerPending(BuildContext context, PropertiesController c) {    double dpWidth = 150;    double inputWidth = 344;    return SpacedColumn(children: [      SizedBox(          width: double.infinity,          child: SingleChildScrollView(              child: SpacedColumn(                  crossAxisAlignment: CrossAxisAlignment.center,                  mainAxisAlignment: MainAxisAlignment.center,                  verticalSpace: 8.0,                  children: [                Padding(                    padding: const EdgeInsets.symmetric(                        horizontal: 16.0, vertical: 8.0),                    child: SpacedRow(                        crossAxisAlignment: CrossAxisAlignment.center,                        mainAxisAlignment: MainAxisAlignment.spaceBetween,                        children: [                          TextInputWidget(                            width: inputWidth,                            heigth: 48,                            leftIcon: HeroIcons.search,                            hintText: 'Search ...',                            controller: TextEditingController(),                          ),                          SizedBox(                            height: 48,                            child: DropdownWidget(                                hintText: "Action",                                dropdownBtnWidth: dpWidth,                                dropdownOptionsWidth: dpWidth,                                onChanged: (val) {},                                items: const [                                  "Basic",                                  "Premium",                                  "Enterprise"                                ]),                          )                        ])),                const Divider(height: 0, color: ThemeColors.gray11),              ]))),      const Divider(height: 0, color: ThemeColors.gray11),    ]);  }  Widget _footerPending(PropertiesController c) {    return Padding(      padding:          const EdgeInsets.only(left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),      child: SpacedRow(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SpacedRow(                horizontalSpace: 8.0,                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  KText(                      text: "Showing",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                  DropdownWidget(                    hintText: "Entries",                    items: Constants.tablePageSizes                        .map<String>((e) => e.toString())                        .toList(),                    dropdownBtnWidth: 120,                    onChanged: c.onPageSizeChange,                    value: c.gridStateManager.pageSize.toString(),                  ),                  // MyWidget(),                  KText(                      text: "of ${c.departments.length} entries",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                ]),            TablePaginationWidget(                currentPage: c.gridStateManager.page,                totalPages: c.gridStateManager                    .totalPage, //(widget._itemCount / _pageSize).ceil(),                onPageChanged: c.onPageChange),          ]),    );  }  Widget complete() {    return tableBodyComplete(context);  }  Widget tableBodyComplete(BuildContext context) {    return GBuilder<PropertiesController>(      child: (c) => TableWrapperWidget(          enableShadow: false,          padding: const EdgeInsets.all(0),          child: SizedBox(            width: double.infinity,            child: SpacedColumn(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              crossAxisAlignment: CrossAxisAlignment.start,              children: [                _headerComplete(context, c),                _bodyComplete(context, c),                const Divider(                  color: ThemeColors.gray11,                  thickness: 1.0,                ),                if (c.isSmLoaded) _footerComplete(c),              ],            ),          )),    );  }  Widget _bodyComplete(BuildContext context, PropertiesController c) {    return UsersListTable(      onSmReady: c.setSm,      rows: c.departments          .map<PlutoRow>(            _buildItem,          )          .toList(),      cols: c.columns(context),    );  }  PlutoRow _buildItem(PropertiesMd e) {    return PlutoRow(cells: {      "name": PlutoCell(value: e.title ?? "-"),      "location": PlutoCell(value: e.locationName ?? "-"),      "client": PlutoCell(value: e.clientName ?? "-"),      "warehouse": PlutoCell(value: e.warehouseName ?? "-"),      "status": PlutoCell(value: (e.active ?? false) ? "active" : "inactive"),      "action": PlutoCell(value: e),    });  }  Widget _headerComplete(BuildContext context, PropertiesController c) {    double dpWidth = 150;    double inputWidth = 344;    return SpacedColumn(children: [      SizedBox(          width: double.infinity,          child: SingleChildScrollView(              child: SpacedColumn(                  crossAxisAlignment: CrossAxisAlignment.center,                  mainAxisAlignment: MainAxisAlignment.center,                  verticalSpace: 8.0,                  children: [                Padding(                    padding: const EdgeInsets.symmetric(                        horizontal: 16.0, vertical: 8.0),                    child: SpacedRow(                        crossAxisAlignment: CrossAxisAlignment.center,                        mainAxisAlignment: MainAxisAlignment.spaceBetween,                        children: [                          TextInputWidget(                            width: inputWidth,                            heigth: 48,                            leftIcon: HeroIcons.search,                            hintText: 'Search ...',                            controller: TextEditingController(),                          ),                          SizedBox(                            height: 48,                            child: DropdownWidget(                                hintText: "Action",                                dropdownBtnWidth: dpWidth,                                dropdownOptionsWidth: dpWidth,                                onChanged: (val) {},                                items: const [                                  "Basic",                                  "Premium",                                  "Enterprise"                                ]),                          )                        ])),                const Divider(height: 0, color: ThemeColors.gray11),              ]))),      const Divider(height: 0, color: ThemeColors.gray11),    ]);  }  Widget _footerComplete(PropertiesController c) {    return Padding(      padding:          const EdgeInsets.only(left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),      child: SpacedRow(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SpacedRow(                horizontalSpace: 8.0,                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  KText(                      text: "Showing",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                  DropdownWidget(                    hintText: "Entries",                    items: Constants.tablePageSizes                        .map<String>((e) => e.toString())                        .toList(),                    dropdownBtnWidth: 120,                    onChanged: c.onPageSizeChange,                    value: c.gridStateManager.pageSize.toString(),                  ),                  // MyWidget(),                  KText(                      text: "of ${c.departments.length} entries",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                ]),            TablePaginationWidget(                currentPage: c.gridStateManager.page,                totalPages: c.gridStateManager                    .totalPage, //(widget._itemCount / _pageSize).ceil(),                onPageChanged: c.onPageChange),          ]),    );  }}