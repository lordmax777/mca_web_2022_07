// ignore_for_file: invalid_use_of_protected_memberimport 'package:auto_route/auto_route.dart';import 'package:get/get.dart';import 'package:mca_web_2022_07/manager/router/router.dart';import '../../../manager/models/approval_reqest_md.dart';import '../../../manager/redux/sets/app_state.dart';import '../../../manager/redux/states/general_state.dart';import '../../../theme/theme.dart';import '../../properties/property_drawer.dart';class ApprovalRequestController extends GetxController {  static ApprovalRequestController get to => Get.find();  final RxInt _pageSize = 10.obs;  final RxInt _page = 1.obs;  int get page => _page.value;  int get pageSize => _pageSize.value;  set setPage(int value) => _page.value = value;  set setPageSize(int value) => _pageSize.value = value;  final RxBool _isSmLoaded = false.obs;  bool get isSmLoaded => _isSmLoaded.value;  set setIsSmLoaded(bool value) => _isSmLoaded.value = value;  List<PlutoColumn> columns(BuildContext context) {    return [      PlutoColumn(          title: "Requested On",          field: "requestedOn",          type: PlutoColumnType.text(),          renderer: (rendererContext) =>              GridTableHelpers.getMainColoredRenderer(rendererContext,                  title: rendererContext.cell.value.toString(),                  onTap: (PlutoColumnRendererContext ctx) =>                      _onColumnItemNavigate(ctx))),      PlutoColumn(        title: "Name",        field: "name",        type: PlutoColumnType.text(),      ),      PlutoColumn(title: "Type", field: "client", type: PlutoColumnType.text()),      PlutoColumn(          title: "Date / Time",          field: "dateTime",          type: PlutoColumnType.text()),      PlutoColumn(        title: "Comments",        field: "comments",        enableSorting: false,        type: PlutoColumnType.text(),        renderer: GridTableHelpers.getStatusRenderer,      ),      PlutoColumn(        title: "Action",        field: "action",        enableSorting: false,        type: PlutoColumnType.text(),        renderer: (rendererContext) => GridTableHelpers.getActionRenderer(          rendererContext,          onTap: (PlutoColumnRendererContext ctx) => _onEditClick(context, ctx),        ),      ),    ];  }  final RxList<ApprovalRequestMd> _deps = <ApprovalRequestMd>[].obs;  void removeDepsWhere(ApprovalRequestMd w) =>      _deps.removeWhere((e) => e.id == w.id);  List<ApprovalRequestMd> get departments => _deps;  setList(List<ApprovalRequestMd> d) {    final dd = [...d];    dd.sort((a, b) => a.name!.compareTo(b.name!));    _deps.value = dd;    return _deps;  }  final TextEditingController searchController = TextEditingController();  late PlutoGridStateManager gridStateManager;  final List<PlutoRow> inactiveRows = [];  final RxBool _isShowInactive = false.obs;  bool get isShowInactive => _isShowInactive.value;  void setShowInactive(bool val) {    if (val) {      gridStateManager.appendRows(inactiveRows);    } else {      gridStateManager.removeRows(inactiveRows);    }    // ignore: invalid_use_of_visible_for_testing_member    searchController.notifyListeners();    _isShowInactive.value = val;    update();  }  void setSm(PlutoGridStateManager sm) {    gridStateManager = sm;    inactiveRows.addAll(gridStateManager.refRows.where((element) =>        !(element.cells["action"]!.value as ApprovalRequestMd).active!));    if (!isShowInactive) {      gridStateManager.removeRows(inactiveRows);    }    gridStateManager.setPage(0);    gridStateManager.setPageSize(10);    gridStateManager.setPage(page);    _setFilter();    setIsSmLoaded = true;  }  void _setFilter() {    searchController.addListener(() {      if (searchController.text.isNotEmpty) {        if (gridStateManager.page > 1) {          gridStateManager.setPage(1);        }        gridStateManager.setFilter(          (element) {            final String search = searchController.text.toLowerCase();            bool searched =                element.cells['name']?.value.toLowerCase().contains(search);            if (!searched) {              searched = element.cells['location']?.value                  .toLowerCase()                  .contains(search);              if (!searched) {                searched = element.cells['shiftTime']?.value                    .toLowerCase()                    .contains(search);                if (!searched) {                  searched = (element.cells['requestedBy']?.value                          .toString()                          .toLowerCase()                          .contains(search)) ??                      false;                  if (!searched) {                    searched = element.cells['status']?.value                        .toLowerCase()                        .contains(search);                  }                }              }            }            return searched;          },        );        onPageChange(gridStateManager.page);        onPageSizeChange(gridStateManager.pageSize.toString());        return;      }      gridStateManager.setFilter((element) => true);      onPageChange(gridStateManager.page);      onPageSizeChange(gridStateManager.pageSize.toString());    });  }  void onPageSizeChange(pageS) {    setPageSize = int.parse(pageS);    gridStateManager.setPageSize(pageSize);    gridStateManager.setPage(1);    setPage = 1;    update();  }  void onPageChange(int page) {    setPage = page;    gridStateManager.setPage(page);    update();  }  Future<void> _onColumnItemNavigate(PlutoColumnRendererContext ctx) async {    appStore.dispatch(UpdateGeneralStateAction(        endDrawer: PropertyDrawer(      property: ctx.row.cells['action']?.value,    )));    await Future.delayed(const Duration(milliseconds: 100));    if (Constants.scaffoldKey.currentState != null) {      if (!Constants.scaffoldKey.currentState!.isDrawerOpen) {        Constants.scaffoldKey.currentState!.openEndDrawer();      }    }  }  void _onEditClick(BuildContext context, PlutoColumnRendererContext ctx) {    context        .pushRoute(NewPropertyRoute(property: ctx.row.cells['action']?.value));  }  @override  void dispose() {    searchController.dispose();    super.dispose();  }}