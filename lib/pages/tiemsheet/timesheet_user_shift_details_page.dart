import 'package:flutter_redux/flutter_redux.dart';import 'package:mca_web_2022_07/pages/tiemsheet/timesheet_drawer.dart';import '../../comps/show_overlay_popup.dart';import '../../manager/models/timesheet_dep_md.dart';import '../../manager/redux/sets/app_state.dart';import '../../manager/redux/states/general_state.dart';import '../../theme/theme.dart';class TimesheetUserShiftDetailsPage extends StatefulWidget {  final TimesheetDepMd timesheetDep;  TimesheetUserShiftDetailsPage({Key? key, required this.timesheetDep})      : super(key: key);  @override  State<TimesheetUserShiftDetailsPage> createState() =>      _TimesheetUserShiftDetailsPageState();}class _TimesheetUserShiftDetailsPageState    extends State<TimesheetUserShiftDetailsPage> {  TextEditingController clockInCntr = TextEditingController();  TextEditingController clockOutCntr = TextEditingController();  PlutoGridStateManager? stateManager;  bool get isStateManagerInitialized => stateManager != null;  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        builder: (_, state) => PageWrapper(              child: SpacedColumn(verticalSpace: 16.0, children: [                SpacedRow(                    crossAxisAlignment: CrossAxisAlignment.center,                    horizontalSpace: 16.0,                    children: [                      InkWell(                        onTap: () {                          Navigator.pop(context);                        },                        child: const HeroIcon(                          HeroIcons.arrowLeft,                          size: 26,                        ),                      ),                      KText(                        text: widget.timesheetDep.staffName,                        fontSize: 24,                        fontWeight: FWeight.bold,                        isSelectable: false,                        textColor: ThemeColors.gray1,                      ),                    ]),                statusBoxes(context),                ErrorWrapper(                    errors: [],                    child: TableWrapperWidget(                        child: SpacedColumn(children: [                      _buildTopSec(),                      _buildMainBody(context, state),                    ])))              ]),            ));  }  List<PlutoColumn> get columns => [        PlutoColumn(          title: "Date",          field: "date",          type: PlutoColumnType.text(),        ),        PlutoColumn(            title: "Shift", field: "shift", type: PlutoColumnType.text()),        PlutoColumn(          title: "Actual Time",          field: "actualTime",          type: PlutoColumnType.text(),          renderer: (rendererContext) => GridTableHelpers.getActionRenderer(            title: rendererContext                .row.cells[rendererContext.column.field]!.value                .toString(),            disableIcon: true,            rendererContext,            onTap: (PlutoColumnRendererContext ctx) =>                _onColumnItemTap(ctx, context),          ),        ),        PlutoColumn(          title: "Agreed Time",          field: "agreedTime",          enableSorting: false,          type: PlutoColumnType.text(),        ),        PlutoColumn(            title: "Paid Hours",            field: "paidHours",            enableSorting: false,            type: PlutoColumnType.text()),        PlutoColumn(          title: "Agreed Hours",          field: "agreedHours",          enableSorting: false,          type: PlutoColumnType.text(),        ),        PlutoColumn(          title: "Actual Hours",          field: "actualHours",          enableSorting: false,          type: PlutoColumnType.text(),        ),        PlutoColumn(          title: "Requests",          field: "requests",          enableSorting: false,          type: PlutoColumnType.text(),        ),        PlutoColumn(            title: "Comments",            field: "comments",            enableSorting: false,            type: PlutoColumnType.text(),            renderer: (rendererContext) =>                GridTableHelpers.getMainColoredRenderer(rendererContext,                    title: rendererContext.cell.value.toString(),                    onTap: (PlutoColumnRendererContext ctx) =>                        _onColumnItemNavigate(ctx))),        PlutoColumn(          title: "Check",          field: "check",          enableSorting: false,          type: PlutoColumnType.text(),        ),      ].map((e) {        final e1 = e;        e1.textAlign = PlutoColumnTextAlign.center;        return e1;      }).toList();  Widget _buildTopSec() {    return SizedBox(        height: 80,        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.center,            verticalSpace: 8.0,            children: [              Padding(                  padding: const EdgeInsets.symmetric(                    horizontal: 16.0,                    vertical: 8.0,                  ),                  child: SpacedRow(                    crossAxisAlignment: CrossAxisAlignment.center,                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    children: [                      SpacedRow(                          crossAxisAlignment: CrossAxisAlignment.start,                          horizontalSpace: 16.0,                          children: [                            const CircleAvatar(                                radius: 24,                                backgroundColor: ThemeColors.gray11,                                child: HeroIcon(                                  HeroIcons.user,                                  size: 24,                                )),                            SpacedColumn(                                mainAxisAlignment: MainAxisAlignment.start,                                crossAxisAlignment: CrossAxisAlignment.start,                                verticalSpace: 4.0,                                children: [                                  KText(                                      text: widget.timesheetDep.staffName,                                      fontSize: 16,                                      fontWeight: FWeight.bold,                                      textColor: ThemeColors.gray2),                                  KText(                                      text: "Cleaner",                                      fontSize: 14,                                      fontWeight: FWeight.regular,                                      textColor: ThemeColors.gray2),                                ]),                            TextInputWidget(                                isRequired: true,                                disableAll: false,                                heigth: 48,                                width: 184,                                labelText: "Start",                                validator: (value) {},                                leftIcon: HeroIcons.calendar,                                onTap: () async {                                  DateTime? val = await showDatePicker(                                    context: context,                                    initialDate: DateTime.now(),                                    firstDate: DateTime(2015),                                    lastDate: DateTime(2035),                                  );                                }),                          ]),                      SpacedRow(horizontalSpace: 8.0, children: [                        ButtonMediumSecondary(                            leftIcon: const HeroIcon(HeroIcons.cog),                            text: "Columns",                            onPressed: () {}),                        ButtonMediumSecondary(                            leftIcon: const HeroIcon(HeroIcons.download),                            text: "Download PDF",                            onPressed: () {}),                      ])                    ],                  )),              const Divider(height: 0, color: ThemeColors.gray11),            ]));  }  Widget _buildMainBody(BuildContext context, AppState state) {    return TableWrapperWidget(        padding: const EdgeInsets.all(0),        child: SizedBox(          width: double.infinity,          child: SpacedColumn(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              _body(state),              if (isStateManagerInitialized) _footer(state),            ],          ),        ));  }  Widget _body(AppState state) {    return TimesheetListDepTable(        rows: [],        onSmReady: (p0) {          if (!isStateManagerInitialized) {            stateManager = p0;            stateManager!.addListener(() {              setState(() {});            });            final List<TimesheetDepMd> allTimesheetDepart = [              TimesheetDepMd(                  id: 1,                  staffName: widget.timesheetDep.staffName,                  scheduledHours: widget.timesheetDep.scheduledHours,                  actualHours: widget.timesheetDep.actualHours,                  overtime: widget.timesheetDep.overtime,                  timeOff: widget.timesheetDep.timeOff,                  lates: widget.timesheetDep.lates,                  cleans: widget.timesheetDep.cleans)            ];            stateManager!.removeAllRows();            stateManager!.appendRows(                allTimesheetDepart.map((e) => _buildRow(e)).toList());          }          stateManager!.setPage(1);          stateManager!.setPageSize(10);        },        cols: columns);  }  Widget _footer(AppState state) {    return Padding(        padding: const EdgeInsets.only(            left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),        child: SpacedRow(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              SpacedRow(                  horizontalSpace: 8.0,                  crossAxisAlignment: CrossAxisAlignment.center,                  children: [                    KText(                        text: "Showing",                        textColor: ThemeColors.black,                        fontSize: 14.0,                        isSelectable: false),                    ButtonMedium(                      text: "Submit",                      icon: const HeroIcon(HeroIcons.check),                      onPressed: () {},                      bgColor: ThemeColors.blue3,                    ),                  ]),            ]));  }  PlutoRow _buildRow(TimesheetDepMd timesheetDep, {bool checked = false}) {    return PlutoRow(      checked: checked,      cells: {        'date': PlutoCell(value: "Thu, 1st Sep"),        'shift': PlutoCell(value: "Flat 26, 102 Westminster SE1 7XT"),        'actualTime': PlutoCell(value: "08:00 - 16:00"),        'agreedTime': PlutoCell(value: "${timesheetDep.actualHours} Hr"),        'paidHours': PlutoCell(value: "${timesheetDep.actualHours} Hr"),        'agreedHours': PlutoCell(value: "${timesheetDep.actualHours} Hr"),        'actualHours': PlutoCell(value: "${timesheetDep.actualHours} Hr"),        'requests': PlutoCell(value: "Time Off"),        'comments': PlutoCell(value: "View${2}"),        'check': PlutoCell(),      },    );  }  Widget statusBoxes(BuildContext context) {    List<String> titles = [      "Agreed Hours",      "Actual Hours",      "Late",      "Leave Early",      "Overtime"    ];    List<double> subTitles = [65, 18, 56.5, 44, 48];    List<Widget> list = [];    for (int i = 0; i < titles.length; i++) {      list.add(singleStatusBoxes(titles[i], subTitles[i].toString()));    }    return SpacedRow(        crossAxisAlignment: CrossAxisAlignment.center,        horizontalSpace: 16,        children: list);  }  Widget singleStatusBoxes(String text, String subString) {    return Container(        height: 94,        decoration: BoxDecoration(            color: ThemeColors.white,            borderRadius: BorderRadius.circular(12),            boxShadow: [              BoxShadow(                color: ThemeColors.black.withOpacity(.08),                offset: const Offset(0, 4),                blurRadius: 24,              ),              BoxShadow(                color: ThemeColors.black.withOpacity(.08),                offset: const Offset(0, 2),                blurRadius: 4,              ),            ]),        padding: const EdgeInsets.only(left: 24, right: 24, top: 24, bottom: 4),        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.start,            verticalSpace: 8,            children: [              KText(                text: text,                fontSize: 18,                fontWeight: FWeight.bold,                isSelectable: false,                textColor: ThemeColors.gray2,              ),              KText(                  text: subString,                  fontSize: 16,                  fontWeight: FWeight.regular,                  isSelectable: false,                  textColor: ThemeColors.gray2)            ]));  }  Future<void> _onColumnItemNavigate(PlutoColumnRendererContext ctx) async {    appStore.dispatch(UpdateGeneralStateAction(        endDrawer: TimesheetDrawer(      timesheetDep: widget.timesheetDep,    )));    await Future.delayed(const Duration(milliseconds: 100));    if (Constants.scaffoldKey.currentState != null) {      if (!Constants.scaffoldKey.currentState!.isDrawerOpen) {        Constants.scaffoldKey.currentState!.openEndDrawer();      }    }  }  _onColumnItemTap(PlutoColumnRendererContext ctx, BuildContext context) async {    showOverlayPopup(      horizontalPadding: 24.0,      paddingBottom: 24.0,      paddingTop: 24.0,      margin: const EdgeInsets.symmetric(horizontal: 200.0),      body: SpacedColumn(verticalSpace: 16.0, children: [        _header("Actual Time"),        const Divider(height: 1, thickness: 1, color: ThemeColors.gray11),        SizedBox(            width: 448,            child: SpacedColumn(children: [              TextInputWidget(                width: 220,                heigth: 56,                leftIcon: HeroIcons.clock,                hintText: "Clock In",                controller: clockInCntr,                isRequired: true,              ),              TextInputWidget(                width: 220,                heigth: 56,                hintText: "Clock Out",                leftIcon: HeroIcons.clock,                controller: clockOutCntr,                isRequired: true,              )            ])),        const Divider(height: 1, thickness: 1, color: ThemeColors.gray11),        SpacedRow(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.end,            horizontalSpace: 16.0,            children: [              ButtonMediumSecondary(                  text: "Cancel",                  onPressed: () {                    Navigator.of(context).pop();                  }),              ButtonMedium(                  text: "Submit", bgColor: ThemeColors.blue3, onPressed: () {})            ])      ]),      context: context,    );  }  Widget _header(String title) {    return SpacedRow(      mainAxisAlignment: MainAxisAlignment.spaceBetween,      crossAxisAlignment: CrossAxisAlignment.center,      children: [        KText(          text: title,          fontSize: 18.0,          fontWeight: FWeight.bold,          isSelectable: false,          textColor: ThemeColors.gray2,        ),        IconButton(            onPressed: () {              Navigator.of(context).pop();            },            icon: const HeroIcon(HeroIcons.x,                color: ThemeColors.gray2, size: 20.0)),      ],    );  }}