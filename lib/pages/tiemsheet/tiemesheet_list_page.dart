import 'package:auto_route/auto_route.dart';import 'package:flutter_redux/flutter_redux.dart';import '../../app.dart';import '../../manager/models/timesheet_dep_md.dart';import '../../manager/redux/sets/app_state.dart';import '../../manager/router/router.dart';import '../../theme/theme.dart';class TimesheetListPage extends StatefulWidget {  const TimesheetListPage({Key? key}) : super(key: key);  @override  State<TimesheetListPage> createState() => _TimesheetListPageState();}class _TimesheetListPageState extends State<TimesheetListPage> {  final TextEditingController _searchController = TextEditingController();  PlutoGridStateManager? stateManager;  bool get isStateManagerInitialized => stateManager != null;  void _onPageSizeChange(String pageS) {    int pageSize = int.tryParse(pageS) ?? 10;    stateManager!.setPageSize(pageSize);    stateManager!.setPage(1);  }  void _onPageChange(int page) {    stateManager!.setPage(page);  }  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        builder: (_, state) => PageWrapper(              child: SpacedColumn(verticalSpace: 16.0, children: [                const PagesTitleWidget(title: 'Timesheet'),                statusBoxes(context),                ErrorWrapper(                    errors: [],                    child: TableWrapperWidget(                        child: SpacedColumn(children: [                      _buildTopSec(),                      _buildMainBody(context, state),                    ])))              ]),            ));  }  List<PlutoColumn> get columns => [        PlutoColumn(          title: "Staff name",          field: "staffName",          type: PlutoColumnType.text(),          renderer: (rendererContext) => GridTableHelpers.getActionRenderer(            title: rendererContext                .row.cells[rendererContext.column.field]!.value                .toString(),            disableIcon: true,            rendererContext,            onTap: (PlutoColumnRendererContext ctx) =>                _onColumnItemNavigate(ctx),          ),        ),        PlutoColumn(            title: "Scheduled Hours",            field: "scheduledHours",            type: PlutoColumnType.text()),        PlutoColumn(            title: "Actual Hours",            field: "actualHours",            type: PlutoColumnType.text()),        PlutoColumn(            title: "Overtime", field: "overtime", type: PlutoColumnType.text()),        PlutoColumn(            title: "Time Off", field: "timeOff", type: PlutoColumnType.text()),        PlutoColumn(          title: "Lates",          field: "lates",          enableSorting: false,          type: PlutoColumnType.text(),        ),        PlutoColumn(          title: "Cleans",          field: "cleans",          width: 240,          enableSorting: false,          type: PlutoColumnType.text(),        ),      ].map((e) {        final e1 = e;        e1.textAlign = PlutoColumnTextAlign.center;        return e1;      }).toList();  Widget _buildTopSec() {    return SizedBox(        height: 80,        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.center,            verticalSpace: 8.0,            children: [              Padding(                  padding: const EdgeInsets.symmetric(                    horizontal: 16.0,                    vertical: 8.0,                  ),                  child: SpacedRow(                    crossAxisAlignment: CrossAxisAlignment.center,                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    children: [                      SpacedRow(                          crossAxisAlignment: CrossAxisAlignment.start,                          horizontalSpace: 16.0,                          children: [                            SizedBox(                                height: 48,                                child: DropdownWidget(                                    hintText: "Departments",                                    dropdownBtnWidth: 280,                                    dropdownOptionsWidth: 280,                                    onChanged: (val) {},                                    value: "All Departments",                                    items: const [                                      "All Departments",                                      "Single Department",                                    ])),                            TextInputWidget(                                isRequired: true,                                disableAll: false,                                heigth: 48,                                width: 184,                                labelText: "Start",                                validator: (value) {},                                leftIcon: HeroIcons.calendar,                                onTap: () async {                                  DateTime? val = await showDatePicker(                                    context: context,                                    initialDate: DateTime.now(),                                    firstDate: DateTime(2015),                                    lastDate: DateTime(2035),                                  );                                }),                          ]),                      SpacedRow(horizontalSpace: 8.0, children: [                        ButtonMediumSecondary(                            leftIcon: const HeroIcon(HeroIcons.users),                            text: "Department",                            onPressed: () {}),                        ButtonMediumSecondary(                            leftIcon: const HeroIcon(HeroIcons.loop),                            text: "Switch",                            onPressed: () {}),                        ButtonMediumSecondary(                            leftIcon: const HeroIcon(HeroIcons.listLayout),                            text: "View Summary",                            onPressed: () async {                              await appRouter.navigate(TimesheetSummaryRoute());                            }),                      ])                    ],                  )),              const Divider(height: 0, color: ThemeColors.gray11),            ]));  }  Widget _buildMainBody(BuildContext context, AppState state) {    return TableWrapperWidget(        padding: const EdgeInsets.all(0),        child: SizedBox(          width: double.infinity,          child: SpacedColumn(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              _body(state),              const Divider(                color: ThemeColors.gray11,                thickness: 1.0,              ),              if (isStateManagerInitialized) _footer(state),            ],          ),        ));  }  Widget _body(AppState state) {    return TimesheetListDepTable(        rows: [],        onSmReady: (p0) {          if (!isStateManagerInitialized) {            stateManager = p0;            stateManager!.addListener(() {              setState(() {});            });            final List<TimesheetDepMd> allTimesheetDepart = [              TimesheetDepMd(                  id: 1,                  staffName: "Marcus Chiesa",                  scheduledHours: " 40",                  actualHours: " 35",                  overtime: "5.5",                  timeOff: "2",                  lates: "12",                  cleans: " 12")            ];            stateManager!.removeAllRows();            stateManager!.appendRows(                allTimesheetDepart.map((e) => _buildRow(e)).toList());          }          stateManager!.setPage(1);          stateManager!.setPageSize(10);        },        cols: columns);  }  Widget _footer(AppState state) {    return Padding(        padding: const EdgeInsets.only(            left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),        child: SpacedRow(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              SpacedRow(                  horizontalSpace: 8.0,                  crossAxisAlignment: CrossAxisAlignment.center,                  children: [                    KText(                        text: "Showing",                        textColor: ThemeColors.black,                        fontSize: 14.0,                        isSelectable: false),                    KText(                        text: "of ${stateManager!.rows.length} entries",                        textColor: ThemeColors.black,                        fontSize: 14.0,                        isSelectable: false),                  ]),              TablePaginationWidget(                  currentPage: stateManager!.page,                  totalPages: stateManager!                      .totalPage, //(widget._itemCount / _pageSize).ceil(),                  onPageChanged: (int i) => _onPageChange(i)),            ]));  }  PlutoRow _buildRow(TimesheetDepMd timesheetDep, {bool checked = false}) {    return PlutoRow(      checked: checked,      cells: {        'staffName': PlutoCell(value: timesheetDep.staffName),        'scheduledHours': PlutoCell(value: timesheetDep.scheduledHours),        'actualHours': PlutoCell(value: timesheetDep.actualHours),        'overtime': PlutoCell(value: timesheetDep.overtime),        'timeOff': PlutoCell(value: timesheetDep.timeOff),        'lates': PlutoCell(value: timesheetDep.lates),        'cleans': PlutoCell(value: timesheetDep.cleans),      },    );  }  Widget statusBoxes(BuildContext context) {    List<String> titles = [      "Cleans",      "Properties",      "Scheduled Hours",      "Actual Hours",      "Paid Hours",      "Special Rate Hours",      "Missed Cleans"    ];    List<double> subTitles = [65, 18, 56.5, 44, 48, 0, 5];    List<Widget> list = [];    for (int i = 0; i < titles.length; i++) {      list.add(singleStatusBoxes(titles[i], subTitles[i].toString()));    }    return SpacedRow(        crossAxisAlignment: CrossAxisAlignment.center,        horizontalSpace: 16,        children: list);  }  Widget singleStatusBoxes(String text, String subString) {    return Container(        height: 110,        decoration: BoxDecoration(            color: ThemeColors.white,            borderRadius: BorderRadius.circular(12),            boxShadow: [              BoxShadow(                color: ThemeColors.black.withOpacity(.08),                offset: const Offset(0, 4),                blurRadius: 24,              ),              BoxShadow(                color: ThemeColors.black.withOpacity(.08),                offset: const Offset(0, 2),                blurRadius: 4,              ),            ]),        padding: const EdgeInsets.all(24),        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.start,            verticalSpace: 8,            children: [              KText(                text: text,                fontSize: 18,                fontWeight: FWeight.bold,                isSelectable: false,                textColor: ThemeColors.gray2,              ),              KText(                  text: subString,                  fontSize: 16,                  fontWeight: FWeight.regular,                  isSelectable: false,                  textColor: ThemeColors.gray2)            ]));  }  Future<void> _onColumnItemNavigate(PlutoColumnRendererContext ctx) async {    appRouter.navigate(TimesheetUserShiftDetailsRoute(        timesheetDep: TimesheetDepMd(      id: ctx.row.cells['id']?.value ?? 0,      staffName: ctx.row.cells['staffName']?.value,      scheduledHours: ctx.row.cells['scheduledHours']?.value,      actualHours: ctx.row.cells['actualHours']?.value,      overtime: ctx.row.cells['overtime']?.value,      timeOff: ctx.row.cells['timeOff']?.value,      lates: ctx.row.cells['lates']?.value,      cleans: ctx.row.cells['cleans']?.value,    )));  }}