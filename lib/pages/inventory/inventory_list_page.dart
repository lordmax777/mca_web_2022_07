import 'package:flutter_redux/flutter_redux.dart';import '../../manager/models/inventory_md.dart';import '../../manager/redux/sets/app_state.dart';import '../../theme/theme.dart';class InventoryListPage extends StatefulWidget {  const InventoryListPage({Key? key}) : super(key: key);  @override  State<InventoryListPage> createState() => _InventoryListPageState();}class _InventoryListPageState extends State<InventoryListPage> {  final TextEditingController _searchController = TextEditingController();  PlutoGridStateManager? stateManager;  bool get isStateManagerInitialized => stateManager != null;  void _onPageSizeChange(String pageS) {    int pageSize = int.tryParse(pageS) ?? 10;    stateManager!.setPageSize(pageSize);    stateManager!.setPage(1);  }  void _onPageChange(int page) {    stateManager!.setPage(page);  }  void _setFilter() {    _searchController.addListener(() {      if (_searchController.text.isNotEmpty) {        if (stateManager!.page > 1) {          stateManager!.setPage(1);        }        stateManager!.setFilter(          (element) {            final String search = _searchController.text.toLowerCase();            bool searched =                element.cells['name']?.value.toLowerCase().contains(search);            if (!searched) {              searched = element.cells['contact']?.value                  .toLowerCase()                  .contains(search);              if (!searched) {                searched = element.cells['value']!.value                    .toString()                    .toLowerCase()                    .contains(search);                if (!searched) {                  searched = element.cells['last_sent']?.value                      .toLowerCase()                      .contains(search);                  if (!searched) {                    searched = element.cells['created_on']?.value                        .toLowerCase()                        .contains(search);                    if (!searched) {                      searched = element.cells['valid_until']?.value                          .toLowerCase()                          .contains(search);                      if (!searched) {                        searched = element.cells['contact']?.value                            .toLowerCase()                            .contains(search);                      }                    }                  }                }              }            }            return searched;          },        );        _onPageChange(stateManager!.page);        _onPageSizeChange(Constants.tablePageSizes[0].toString());        return;      }      stateManager!.setFilter((element) => true);      _onPageChange(stateManager!.page);      _onPageSizeChange(Constants.tablePageSizes[0].toString());    });  }  List<PlutoColumn> get columns => [        PlutoColumn(          title: "Warehouse Name",          field: "warehouseName",          type: PlutoColumnType.text(),        ),        PlutoColumn(          title: "Item Name",          field: "itemName",          type: PlutoColumnType.text(),        ),        PlutoColumn(            title: "Product Group No",            field: "productGroupNo",            type: PlutoColumnType.text()),        PlutoColumn(            title: "Current Stock Acquired",            field: "currentStockAcquired",            type: PlutoColumnType.text()),        PlutoColumn(            title: "Last Update Date",            field: "lastUpdateDate",            type: PlutoColumnType.text()),        PlutoColumn(          title: "Actions",          field: "action",          enableSorting: false,          type: PlutoColumnType.text(),          renderer: (rendererContext) => GridTableHelpers.getActionRenderer(              rendererContext,              onTap: (_) {}),        ),      ].map((e) {        final e1 = e;        e1.textAlign = PlutoColumnTextAlign.center;        return e1;      }).toList();  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        onWillChange: (previousViewModel, newViewModel) {          final oldApprovalReq = previousViewModel?.generalState.inventoryList;          final newApprovalReq = newViewModel.generalState.inventoryList;          if (oldApprovalReq?.length != newApprovalReq.length) {            if (isStateManagerInitialized) {              stateManager!.removeAllRows();              stateManager!                  .appendRows(newApprovalReq.map((e) => _buildRow(e)).toList());            }          }        },        builder: (_, state) => PageWrapper(                child: SpacedColumn(                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    crossAxisAlignment: CrossAxisAlignment.start,                    verticalSpace: 16,                    children: [                  KText(                    text: "Inventory",                    fontSize: 24,                    fontWeight: FWeight.bold,                    textColor: ThemeColors.gray1,                  ),                  TableWrapperWidget(                      padding: const EdgeInsets.all(0),                      child: SizedBox(                          width: double.infinity,                          child: SpacedColumn(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                _header(),                                _body(state),                                const Divider(                                  color: ThemeColors.gray11,                                  thickness: 1.0,                                ),                                if (isStateManagerInitialized) _footer(state),                              ])))                ])));  }  Widget _header() {    double dpWidth = 150;    double inputWidth = 344;    return SizedBox(        height: 80,        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.center,            verticalSpace: 8.0,            children: [              Padding(                  padding: const EdgeInsets.symmetric(                    horizontal: 16.0,                    vertical: 8.0,                  ),                  child: SpacedRow(                      crossAxisAlignment: CrossAxisAlignment.center,                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        SpacedRow(                            crossAxisAlignment: CrossAxisAlignment.center,                            horizontalSpace: 8.0,                            children: [                              TextInputWidget(                                width: inputWidth,                                heigth: 48,                                leftIcon: HeroIcons.search,                                hintText: 'Search ...',                                controller: TextEditingController(),                              ),                              ButtonMedium(                                  icon: const HeroIcon(HeroIcons.garage,                                      color: ThemeColors.blue3, size: 16),                                  text: "Warehouse",                                  bgColor: ThemeColors.white,                                  textStyle: ThemeText.regular                                      .copyWith(color: ThemeColors.black),                                  onPressed: () {}),                              ButtonMedium(                                  icon: const HeroIcon(HeroIcons.loop,                                      color: ThemeColors.blue3, size: 16),                                  bgColor: ThemeColors.white,                                  text: "Switch",                                  textStyle: ThemeText.regular                                      .copyWith(color: ThemeColors.blue3),                                  onPressed: () {})                            ]),                        SpacedRow(                          crossAxisAlignment: CrossAxisAlignment.center,                          horizontalSpace: 8.0,                          children: [                            ButtonLarge(                                icon: const HeroIcon(HeroIcons.bin,                                    color: ThemeColors.white, size: 16),                                text: "Remove Items",                                onPressed: () {},                                bgColor: ThemeColors.red3),                            ButtonLarge(                                icon: const HeroIcon(HeroIcons.plusCircle,                                    color: ThemeColors.white, size: 16),                                text: "Add Items",                                onPressed: () {},                                bgColor: ThemeColors.blue3)                          ],                        )                      ])),              const Divider(height: 0, color: ThemeColors.gray11),            ]));  }  Widget _body(AppState state) {    return InventoryBodyTable(        gridBorderColor: Colors.grey[300]!,        rows: [],        noRowsText: 'No Inventory list found',        onSmReady: (p0) {          if (!isStateManagerInitialized) {            stateManager = p0;            stateManager!.addListener(() {              setState(() {});            });            final allInventoryList = state.generalState.inventoryList;            stateManager!.removeAllRows();            stateManager!                .appendRows(allInventoryList.map((e) => _buildRow(e)).toList());            _setFilter();          }          stateManager!.setPage(1);          stateManager!.setPageSize(10);        },        cols: columns);  }  Widget _footer(AppState state) {    return Padding(      padding:          const EdgeInsets.only(left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),      child: SpacedRow(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SpacedRow(                horizontalSpace: 8.0,                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  KText(                      text: "Showing",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                  DropdownWidgetV2(                    hintText: "Entries",                    items: Constants.tablePageSizes                        .map((e) => CustomDropdownValue(name: e.toString()))                        .toList(),                    dropdownBtnWidth: 120,                    onChanged: (index) => _onPageSizeChange(                        Constants.tablePageSizes[index].toString()),                    value: CustomDropdownValue(                        name: stateManager!.pageSize.toString()),                  ),                  KText(                      text: "of ${stateManager!.rows.length} entries",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                ]),            TablePaginationWidget(                currentPage: stateManager!.page,                totalPages: stateManager!.totalPage,                onPageChanged: (int i) => _onPageChange(i)),          ]),    );  }  PlutoRow _buildRow(InventoryMd approvalReq, {bool checked = false}) {    String? warehouseName = approvalReq.warehouseName;    String? itemName = approvalReq.itemName;    String? productGroupNo = approvalReq.productGroupNo;    String? currentStockAcquired = approvalReq.currentStockAcquired;    String? lastUpdateDate = approvalReq.lastUpdateDate;    return PlutoRow(      checked: checked,      cells: {        'warehouseName': PlutoCell(value: warehouseName),        'itemName': PlutoCell(value: itemName),        'productGroupNo': PlutoCell(value: productGroupNo),        'currentStockAcquired': PlutoCell(value: currentStockAcquired),        'lastUpdateDate': PlutoCell(value: lastUpdateDate),        'action': PlutoCell(value: ""),      },    );  }}