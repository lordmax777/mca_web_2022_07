import 'package:flutter_redux/flutter_redux.dart';import '../../comps/dropdown_widget1.dart';import '../../manager/redux/sets/app_state.dart';import '../../theme/theme.dart';import 'checklist_comments_drawer.dart';import 'checklist_damages_drawer.dart';class ChecklistListPage extends StatefulWidget {  const ChecklistListPage({Key? key}) : super(key: key);  @override  State<ChecklistListPage> createState() => _ChecklistListPageState();}class _ChecklistListPageState extends State<ChecklistListPage> {  final TextEditingController _searchController = TextEditingController();  PlutoGridStateManager? stateManager;  bool get isStateManagerInitialized => stateManager != null;  final TextEditingController _amountController = TextEditingController();  final TextEditingController _documentNumberController =      TextEditingController();  final TextEditingController _commentController = TextEditingController();  List<String> transferToItemList = [];  String? selectedTransferTo; //init  @override  void initState() {    super.initState();    transferToItemList.addAll(["Warehouse 1", "Warehouse 2", "Warehouse 3"]);    selectedTransferTo = transferToItemList[0];  }  void _onPageSizeChange(String pageS) {    int pageSize = int.tryParse(pageS) ?? 10;    stateManager!.setPageSize(pageSize);    stateManager!.setPage(1);  }  void _onPageChange(int page) {    stateManager!.setPage(page);  }  void _setFilter() {    _searchController.addListener(() {      if (_searchController.text.isNotEmpty) {        if (stateManager!.page > 1) {          stateManager!.setPage(1);        }        stateManager!.setFilter(          (element) {            final String search = _searchController.text.toLowerCase();            bool searched =                element.cells['name']?.value.toLowerCase().contains(search);            if (!searched) {              searched = element.cells['contact']?.value                  .toLowerCase()                  .contains(search);              if (!searched) {                searched = element.cells['value']!.value                    .toString()                    .toLowerCase()                    .contains(search);                if (!searched) {                  searched = element.cells['last_sent']?.value                      .toLowerCase()                      .contains(search);                  if (!searched) {                    searched = element.cells['created_on']?.value                        .toLowerCase()                        .contains(search);                    if (!searched) {                      searched = element.cells['valid_until']?.value                          .toLowerCase()                          .contains(search);                      if (!searched) {                        searched = element.cells['contact']?.value                            .toLowerCase()                            .contains(search);                      }                    }                  }                }              }            }            return searched;          },        );        _onPageChange(stateManager!.page);        _onPageSizeChange(Constants.tablePageSizes[0].toString());        return;      }      stateManager!.setFilter((element) => true);      _onPageChange(stateManager!.page);      _onPageSizeChange(Constants.tablePageSizes[0].toString());    });  }  List<PlutoColumn> get columns => [        PlutoColumn(title: "Date", field: "date", type: PlutoColumnType.text()),        PlutoColumn(            title: "Shift", field: "shift", type: PlutoColumnType.text()),        PlutoColumn(            title: "Users", field: "users", type: PlutoColumnType.text()),        PlutoColumn(            title: "Time",            field: "time",            type: PlutoColumnType.text(),            renderer: (rendererContext) {              return Row(                children: [                  const HeroIcon(HeroIcons.user),                  const SizedBox(width: 5),                  Text(rendererContext.cell.value.toString()),                ],              );            }),        PlutoColumn(            title: "Damages",            field: "damages",            type: PlutoColumnType.text(),            renderer: (rendererContext) =>                GridTableHelpers.getMainColoredRenderer(rendererContext,                    title: rendererContext.cell.value.toString(),                    onTap: (PlutoColumnRendererContext ctx) =>                        _onColumnItemNavigateDamages(ctx))),        PlutoColumn(            title: "Comments",            field: "comments",            type: PlutoColumnType.text(),            renderer: (rendererContext) =>                GridTableHelpers.getMainColoredRenderer(rendererContext,                    title: rendererContext.cell.value.toString(),                    onTap: (PlutoColumnRendererContext ctx) =>                        _onColumnItemNavigateComments(ctx))),        PlutoColumn(            title: "Status",            field: "status",            type: PlutoColumnType.text(),            renderer: (rendererContext) {              return SpacedRow(                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  Container(                    width: 10,                    height: 10,                    decoration: const BoxDecoration(                      color: Colors.green,                      shape: BoxShape.circle,                    ),                  ),                  const SizedBox(width: 5),                  Text(rendererContext.cell.value.toString()),                ],              );            }),        PlutoColumn(            title: "Document",            field: "document",            type: PlutoColumnType.text(),            renderer: (rendererContext) => InkWell(                  onTap: () {},                  child: const HeroIcon(HeroIcons.download),                )),      ].map((e) {        final e1 = e;        e1.textAlign = PlutoColumnTextAlign.center;        return e1;      }).toList();  @override  Widget build(BuildContext context) {    return StoreConnector<AppState, AppState>(        converter: (store) => store.state,        onWillChange: (previousViewModel, newViewModel) {},        builder: (_, state) => PageWrapper(                child: SpacedColumn(                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    crossAxisAlignment: CrossAxisAlignment.start,                    verticalSpace: 16,                    children: [                  KText(                    text: "Checklists",                    fontSize: 24,                    fontWeight: FWeight.bold,                    textColor: ThemeColors.gray1,                  ),                  TableWrapperWidget(                      padding: const EdgeInsets.all(0),                      child: SizedBox(                          width: double.infinity,                          child: SpacedColumn(                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                              crossAxisAlignment: CrossAxisAlignment.start,                              children: [                                _header(),                                _body(state),                                const Divider(                                  color: ThemeColors.gray11,                                  thickness: 1.0,                                ),                                if (isStateManagerInitialized) _footer(state),                              ])))                ])));  }  Widget _header() {    double dpWidth = 150;    double inputWidth = 344;    return SizedBox(        height: 80,        child: SpacedColumn(            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisAlignment: MainAxisAlignment.center,            verticalSpace: 8.0,            children: [              Padding(                  padding: const EdgeInsets.symmetric(                    horizontal: 16.0,                    vertical: 8.0,                  ),                  child: SpacedRow(                      crossAxisAlignment: CrossAxisAlignment.center,                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        TextInputWidget(                          width: inputWidth,                          heigth: 48,                          leftIcon: HeroIcons.search,                          hintText: 'Search ...',                          controller: TextEditingController(),                        ),                        ButtonMediumSecondary(                            leftIcon: HeroIcon(HeroIcons.cog,                                color: ThemeColors.MAIN_COLOR, size: 20),                            text: "Columns",                            onPressed: () {}),                      ])),              const Divider(height: 0, color: ThemeColors.gray11),            ]));  }  Widget _body(AppState state) {    final mockUpChecklistMd = [      {        "date": "date",        "shift": "shift",        "users": "users",        "time": "time",        "damages": "damages",        "comments": "comments",        "status": "status",        "document": "document"      }    ];    return CheckListTable(        gridBorderColor: Colors.grey[300]!,        rows: [],        noRowsText: 'No Checklist found',        onSmReady: (p0) {          if (!isStateManagerInitialized) {            stateManager = p0;            stateManager!.addListener(() {              setState(() {});            });            stateManager!.removeAllRows();            // TODO: implement mockUpChecklistMd to buildrow            stateManager!                .appendRows(mockUpChecklistMd.map((e) => _buildRow()).toList());            _setFilter();          }          stateManager!.setPage(1);          stateManager!.setPageSize(10);        },        cols: columns);  }  Widget _footer(AppState state) {    return Padding(      padding:          const EdgeInsets.only(left: 16.0, right: 32.0, top: 4.0, bottom: 4.0),      child: SpacedRow(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            SpacedRow(                horizontalSpace: 8.0,                crossAxisAlignment: CrossAxisAlignment.center,                children: [                  KText(                      text: "Showing",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                  DropdownWidgetV2(                    hintText: "Entries",                    items: Constants.tablePageSizes                        .map((e) => CustomDropdownValue(name: e.toString()))                        .toList(),                    dropdownBtnWidth: 120,                    onChanged: (index) => _onPageSizeChange(                        Constants.tablePageSizes[index].toString()),                    value: CustomDropdownValue(                        name: stateManager!.pageSize.toString()),                  ),                  KText(                      text: "of ${stateManager!.rows.length} entries",                      textColor: ThemeColors.black,                      fontSize: 14.0,                      isSelectable: false),                ]),            TablePaginationWidget(                currentPage: stateManager!.page,                totalPages: stateManager!.totalPage,                onPageChanged: (int i) => _onPageChange(i)),          ]),    );  }  PlutoRow _buildRow() {    return PlutoRow(      cells: {        "date": PlutoCell(value: "14/07/2022"),        "shift": PlutoCell(value: "Camden, 154 Bayham Street NW1 0AU"),        "users": PlutoCell(value: "Roshan Hampton"),        "time": PlutoCell(value: "08:00 - 16:00"),        "damages": PlutoCell(value: "View (0)"),        "comments": PlutoCell(value: "View (2)"),        "status": PlutoCell(value: "In Progress"),        "document": PlutoCell(value: ""),      },    );  }  Widget addRemoveTransFromStock(      {required BuildContext context,      bool? addToStock,      bool? removeFromStock,      bool? transferStock}) {    return Container(        padding: const EdgeInsets.symmetric(horizontal: 16.0),        width: 448,        height: transferStock == true ? 691 : 612,        child: SpacedColumn(verticalSpace: 16.0, children: [          const SizedBox(),          SpacedRow(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              crossAxisAlignment: CrossAxisAlignment.center,              children: [                KText(                    text: addToStock == true                        ? "Add to Stock"                        : removeFromStock == true                            ? "Remove from Stock"                            : transferStock == true                                ? "Transfer Stock"                                : "",                    textColor: ThemeColors.gray2,                    fontSize: 18.0,                    fontWeight: FWeight.bold,                    isSelectable: false),                InkWell(                    onTap: () {                      logger("Close clicked");                      Navigator.of(context).pop();                    },                    child: const HeroIcon(HeroIcons.x,                        size: 18, color: ThemeColors.gray2))              ]),          const Divider(height: 0, color: ThemeColors.gray11),          SpacedRow(              horizontalSpace: 9,              crossAxisAlignment: CrossAxisAlignment.center,              children: [                const HeroIcon(HeroIcons.homeAlt,                    size: 14, color: ThemeColors.gray2),                KText(                    text: "3B Gunterstone",                    textColor: ThemeColors.gray2,                    fontSize: 16.0,                    fontWeight: FWeight.regular,                    isSelectable: false),              ]),          SpacedRow(              horizontalSpace: 9,              crossAxisAlignment: CrossAxisAlignment.center,              children: [                const HeroIcon(HeroIcons.box,                    size: 14, color: ThemeColors.gray2),                KText(                    text: "Bath Mat",                    textColor: ThemeColors.gray2,                    fontSize: 16.0,                    fontWeight: FWeight.regular,                    isSelectable: false)              ]),          SpacedRow(              horizontalSpace: 9,              crossAxisAlignment: CrossAxisAlignment.center,              children: [                const HeroIcon(HeroIcons.archive,                    size: 14, color: ThemeColors.gray2),                KText(                    text: "Current Stock: 30",                    textColor: ThemeColors.gray2,                    fontSize: 16.0,                    fontWeight: FWeight.regular,                    isSelectable: false)              ]),          const Divider(height: 0, color: ThemeColors.gray11),          if (transferStock == true)            DropdownWidget1(                dropdownBtnWidth: 400,                items: transferToItemList,                value: selectedTransferTo,                isRequired: true,                onChanged: (val) {                  setState(() {                    selectedTransferTo = val;                  });                }),          TextInputWidget(            width: 400,            isRequired: true,            controller: _amountController,            hintText: addToStock == true                ? "Amount to Add"                : removeFromStock == true                    ? "Amount to remove"                    : transferStock == true                        ? "Amount to transfer"                        : "",          ),          TextInputWidget(            width: 400,            controller: _documentNumberController,            hintText: "Document Number",          ),          TextInputWidget(            width: 400,            controller: _commentController,            hintText: "Comment",            maxLines: 5,          ),          const Divider(height: 0, color: ThemeColors.gray11),          SpacedRow(              crossAxisAlignment: CrossAxisAlignment.center,              mainAxisAlignment: MainAxisAlignment.end,              horizontalSpace: 16.0,              children: [                ButtonMedium(                    text: "Cancel",                    bgColor: ThemeColors.white,                    textStyle: const TextStyle(color: ThemeColors.gray4),                    onPressed: () {}),                ButtonMedium(                    text: "Submit",                    icon: const HeroIcon(HeroIcons.tick,                        size: 18, color: ThemeColors.white),                    onPressed: () {},                    bgColor: ThemeColors.blue3)              ])        ]));  }  Future<void> _onColumnItemNavigateComments(      PlutoColumnRendererContext ctx) async {    appStore.dispatch(        UpdateUIStateAction(endDrawer: const CheckListCommentsDrawer()));    await Future.delayed(const Duration(milliseconds: 100));    if (Constants.scaffoldKey.currentState != null) {      if (!Constants.scaffoldKey.currentState!.isDrawerOpen) {        Constants.scaffoldKey.currentState!.openEndDrawer();      }    }  }  Future<void> _onColumnItemNavigateDamages(      PlutoColumnRendererContext ctx) async {    appStore.dispatch(        UpdateUIStateAction(endDrawer: const CheckListDamagesDrawer()));    await Future.delayed(const Duration(milliseconds: 100));    if (Constants.scaffoldKey.currentState != null) {      if (!Constants.scaffoldKey.currentState!.isDrawerOpen) {        Constants.scaffoldKey.currentState!.openEndDrawer();      }    }  }}